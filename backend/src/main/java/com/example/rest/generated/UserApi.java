/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rest.generated;

import com.example.rest.generated.model.User;
import com.example.rest.generated.model.UserUpdateRequest;
import com.example.rest.generated.model.UserUpdateResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-14T23:10:22.029621465+02:00[Europe/Zurich]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "User", description = "the User API")
public interface UserApi {

    /**
     * DELETE /user/delete/User : Delete user
     *
     * @return Deleted (status code 204)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/delete/User"
    )
    
    ResponseEntity<Void> deleteUser(
        
    );


    /**
     * GET /user/get/all : Get all users
     *
     * @return All users (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        summary = "Get all users",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/get/all",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<User>> getAllUsers(
        
    );


    /**
     * GET /user/me : Get current user
     *
     * @return User info (status code 200)
     */
    @Operation(
        operationId = "getCurrentUser",
        summary = "Get current user",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/me",
        produces = { "application/json" }
    )
    
    ResponseEntity<User> getCurrentUser(
        
    );


    /**
     * PUT /user/update/user : Update user data
     *
     * @param userUpdateRequest  (required)
     * @return Updated user (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update user data",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated user", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserUpdateResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/update/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserUpdateResponse> updateUser(
        @Parameter(name = "UserUpdateRequest", description = "", required = true) @Valid @RequestBody UserUpdateRequest userUpdateRequest
    );

}
