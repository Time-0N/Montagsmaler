/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.rest.generated;

import com.example.rest.generated.model.AuthenticationRequest;
import com.example.rest.generated.model.TokenResponse;
import com.example.rest.generated.model.UserRegistrationRequest;
import com.example.rest.generated.model.UserRegistrationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-09T14:45:29.811620744+02:00[Europe/Zurich]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Auth", description = "the Auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/token : Authenticate user and get token
     *
     * @param authenticationRequest  (required)
     * @return Token response (status code 200)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Authenticate user and get token",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/token",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TokenResponse> loginUser(
        @Parameter(name = "AuthenticationRequest", description = "", required = true) @Valid @RequestBody AuthenticationRequest authenticationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"refresh_expires_in\" : 6, \"token_type\" : \"token_type\", \"expires_in\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/register : Register a new user
     *
     * @param userRegistrationRequest  (required)
     * @return User registered (status code 201)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User registered", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegistrationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserRegistrationResponse> registerUser(
        @Parameter(name = "UserRegistrationRequest", description = "", required = true) @Valid @RequestBody UserRegistrationRequest userRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email\" : \"email\", \"username\" : \"username\", \"token\" : { \"access_token\" : \"access_token\", \"refresh_token\" : \"refresh_token\", \"refresh_expires_in\" : 6, \"token_type\" : \"token_type\", \"expires_in\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
